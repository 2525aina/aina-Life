rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ユーザーコレクション: ユーザーは自身のユーザーデータのみを読み書きできる
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ペットコレクション: ユーザーは自身のペットデータのみを読み書きできる
    // ペットドキュメントに 'ownerId' フィールドがあり、ユーザーの UID と一致すると仮定
    match /pets/{petId} {
      allow read, write: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // タスクコレクション: ユーザーは自身のペットに紐づくタスクのみを読み書きできる
    // タスクドキュメントに 'petId' フィールドがあり、そのペットの ownerId がユーザーの UID と一致すると仮定
    match /tasks/{taskId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/pets/$(resource.data.petId)).data.ownerId == request.auth.uid;
    }

    // ログコレクション: ユーザーは自身のペットに紐づくログのみを読み書きできる
    // ログドキュメントに 'petId' フィールドがあり、そのペットの ownerId がユーザーの UID と一致すると仮定
    match /logs/{logId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/pets/$(resource.data.petId)).data.ownerId == request.auth.uid;
    }

    // メンバーコレクション: 招待メールと一致する場合に読み取りを許可
    // 書き込みは一旦許可しない（書き込みロジックが不明なため）
    match /{path=**}/members/{memberId} {
      allow read: if request.auth != null && resource.data.inviteEmail == request.auth.token.email;
      allow write: if false; // 書き込みは一旦拒否。必要に応じて調整してください。
    }

    // デフォルトルール: 上記のルールに一致しないすべてのドキュメントへのアクセスを拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}